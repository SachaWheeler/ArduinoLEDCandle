{"name":"ArduinoLedCandle","tagline":"An LED candle powered by Arduino","body":"### Why\r\nI saw a beautiful LED candle at the Museum of Modern Art (New York) and wanted one. How difficult could it be with an Arduino?\r\n\r\n![LED candle (inspiration)](https://j.gifs.com/ygq8LA.gif)\r\n\r\n### Get a video\r\nI probably could have shot something myself, but I did a search and found this on youtube\r\n![](https://j.gifs.com/Kz8JGP.gif)\r\n\r\nWhich I grabbed using:\r\n\r\n`youtube-dl https://www.youtube.com/watch?v=FZc9a5Kg8Yk`\r\n\r\n## Trim it\r\nI cropped it down to a square, including only the flame:\r\n\r\n`ffmpeg -i Candle\\ clipped.mov -vf \"crop=275:275:210:0\" -strict -2 Clipped\\ final.mp4`\r\n\r\nScaled it down to 16x16 pixels:\r\n\r\n`ffmpeg -i Candle\\ final.mp4 -strict -2 -vf scale=16:16 Candle.16x16.mp4`\r\n\r\nAnd split it into it's frames (4 per second seemed sufficient):\r\n\r\n`ffmpeg -i Candle\\ final.mp4  -r 4  images/image-%03d.png`\r\n\r\nwhich left me with this:\r\n![](http://sachawheeler.com/images/LEDCandle-images.png)\r\n\r\n## Processing the frames\r\n<?php\r\n\r\n\t$files = glob(\"images/*.png\");\r\n\tforeach($files as $png){\r\n\t\techo \" { // {$png}\\n\";\r\n\t\t$im = ImageCreateFromPng($png); \r\n\r\n\t\t$imgw = imagesx($im);\r\n\t\t$imgh = imagesy($im);\r\n\t\r\n\t\t// reduce to 8x8\r\n\t\t$bw_image = imagecreatetruecolor(8, 8);\r\n\t\timagecopyresampled($bw_image, $im, 0, 0, 0, 0, 8, 8, $imgw, $imgh);\r\n\t\r\n\t\t$dest_imgw = imagesx($bw_image);\r\n\t\t$dest_imgh = imagesy($bw_image);\r\n\r\n\t\tfor ($i=0; $i<$dest_imgh; $i++)\r\n\t\t{\r\n\t\t\techo \"  B\";\r\n        \tfor ($j=0; $j<$dest_imgw; $j++)\r\n        \t{\r\n            \t// get the rgb value for current pixel\r\n            \t$rgb = ImageColorAt($bw_image, $j, $i); \r\n                \t\t\r\n            \t// extract each value for r, g, b\r\n            \t$rr = ($rgb >> 16) & 0xFF;\r\n            \t$gg = ($rgb >> 8) & 0xFF;\r\n            \t$bb = $rgb & 0xFF;\r\n                \t\t\r\n            \t// get the Value from the RGB value\r\n            \t$g = round(($rr + $gg + $bb) / 3);\r\n                \t\t\r\n            \t// grayscale values have r=g=b=g\r\n            \t// $val = imagecolorallocate($im, $g, $g, $g);\r\n                \t\t\r\n            \t// set the gray value\r\n           \t\t// imagesetpixel ($im, $i, $j, $val);\r\n\t\t\t\t\r\n\t\t\t\techo $g>20?1:0; // This is where I decide to output TRUE or FALSE based on the threshold (20 in this case). If I can output partial values (on another matrix) I'll remove this\r\n\t\t\t\t// if($j<$dest_imgw-1) echo \", \";\r\n        \t}\r\n\t\t\t// echo \"},\\n\";\r\n\t\t\tif($i<$dest_imgh-1) echo \",\";\r\n\t\t\t// echo \"\\n\";\r\n\t\t}\r\n\t\techo \"}, \\n\";\r\n\t}\r\n?>\r\n\r\n## Output\r\n\r\nThe script above gives me the data structure I need to paste into my Arduino Code\r\n\r\n`\r\n    { // images/image-001.png\r\n    B00000000,  B00110000,  B00110000,  B00110000,  B00111000,  B00111000,  B00011000,  B00000000},\r\n\r\n    { // images/image-002.png\r\n    B00000000,  B00110000,  B00110000,  B00110000,  B00111000,  B00111000,  B00011000,  B00000000},\r\n\r\n    { // images/image-003.png\r\n    B00000000,  B00110000,  B00110000,  B00110000,  B00111000,  B00111000,  B00111000,  B00000000},\r\n\r\n    { // images/image-004.png\r\n    B00000000,  B00110000,  B00110000,  B00110000,  B00111000,  B00111000,  B00111000,  B00000000},\r\n\r\n    { // images/image-005.png\r\n    B00100000,  B01110000,  B00110000,  B00111000,  B00111000,  B00111000,  B00111000,  B00000000},\r\n`\r\n\r\n## Result\r\n![Final result](https://i.imgflip.com/qlrhv.gif)\r\n\r\nThe MAX7219 chip (which drives this LED matrix) doesn't allow individual pixel intensity, so they're either on or off. This means the subtleties of the animation are lost.\r\n\r\nTime to wire up my own 8x16 grid...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}