{"name":"ArduinoLedCandle","tagline":"An LED candle powered by Arduino","body":"### Why\r\nI saw a beautiful LED candle at the Museum of Modern Art (New York) and wanted one. How difficult could it be with an Arduino?\r\n\r\n![LED candle (inspiration)](https://gifs.com/gif/ygq8LA)\r\n\r\n### Get a video\r\nI probably could have shot something myself, but I did a search and found this on youtube\r\n![](https://gifs.com/gif/Kz8JGP)\r\n\r\nWhich I grabbed using:\r\n`youtube-dl https://www.youtube.com/watch?v=FZc9a5Kg8Yk`\r\n\r\n## Trim it\r\nI cropped it down to a square, including only the flame\r\n`ffmpeg -i Candle\\ clipped.mov -vf \"crop=275:275:210:0\" -strict -2 Clipped\\ final.mp4`\r\n\r\nScaled it down to 16x16 pixels\r\n`ffmpeg -i Candle\\ final.mp4 -strict -2 -vf scale=16:16 Candle.16x16.mp4`\r\n\r\nAnd split it into it's frames (4 per second seemed sufficient):\r\n`ffmpeg -i Candle\\ final.mp4  -r 4  images/image-%03d.png`\r\n\r\nwhich left me with this:\r\n![](http://sachawheeler.com/images/LEDCandle-images.png)\r\n\r\n## Processing the frames\r\n`<?php\r\n\t$files = glob(\"images/*.png\");\r\n\tforeach($files as $png){\r\n\t\techo \" { // {$png}\\n\";\r\n\t\t$im = ImageCreateFromPng($png); \r\n\r\n\t\t$imgw = imagesx($im);\r\n\t\t$imgh = imagesy($im);\r\n\t\r\n\t\t// reduce to 8x8\r\n\t\t$bw_image = imagecreatetruecolor(8, 8);\r\n\t\timagecopyresampled($bw_image, $im, 0, 0, 0, 0, 8, 8, $imgw, $imgh);\r\n\t\r\n\t\t$dest_imgw = imagesx($bw_image);\r\n\t\t$dest_imgh = imagesy($bw_image);\r\n\r\n\t\tfor ($i=0; $i<$dest_imgh; $i++)\r\n\t\t{\r\n\t\t\techo \"  B\";\r\n        \tfor ($j=0; $j<$dest_imgw; $j++)\r\n        \t{\r\n            \t// get the rgb value for current pixel\r\n            \t$rgb = ImageColorAt($bw_image, $j, $i); \r\n                \t\t\r\n            \t// extract each value for r, g, b\r\n            \t$rr = ($rgb >> 16) & 0xFF;\r\n            \t$gg = ($rgb >> 8) & 0xFF;\r\n            \t$bb = $rgb & 0xFF;\r\n                \t\t\r\n            \t// get the Value from the RGB value\r\n            \t$g = round(($rr + $gg + $bb) / 3);\r\n                \t\t\r\n            \t// grayscale values have r=g=b=g\r\n            \t// $val = imagecolorallocate($im, $g, $g, $g);\r\n                \t\t\r\n            \t// set the gray value\r\n           \t\t// imagesetpixel ($im, $i, $j, $val);\r\n\t\t\t\t\r\n\t\t\t\techo $g>20?1:0;\r\n\t\t\t\t// if($j<$dest_imgw-1) echo \", \";\r\n        \t}\r\n\t\t\t// echo \"},\\n\";\r\n\t\t\tif($i<$dest_imgh-1) echo \",\";\r\n\t\t\t// echo \"\\n\";\r\n\t\t}\r\n\t\techo \"}, \\n\";\r\n\t}\r\n?>\r\n`\r\n\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}